/**
 * Created by klik on 1/4/17.
 */
// create thumbs-up-mutation class for quote.js. When
// this class is called, we will pass it a config object
// generated by our mutationtype that represents the input we want the mutation to have access to.  this requires the quote ID, we give it when we pass the whole quote component to the class on instantiation. We will then pass the in thumps up mutation instantiated class object to Relay.Store to run our query. See page 161

import Relay from 'react-relay'

class ThumbsUpMutation extends Relay.Mutation {
  // use static property to have this class tell us
  // what its requirements are, what data it needs to
  // run correctly. Add likeCount to fragments since we are now depending on the existence of and want to make sure to get it before running that code.
  static fragments = {
    quote: () => Relay.QL `
      fragment on Quote {
          id
          likesCount
      }
    `
  }

  getMutation () {
    return Relay.QL `
      mutation {
          thumbsUp
      }
    `
  }

  getVariables () {
    return {
      quoteId: this.props.quote.id
    }
  }

  getFatQuery () {
    return Relay.QL `
      fragment on ThumbsUpMutationPayload {
          quote {
              likesCount
          }
      }
    `
  }

  getConfigs () {
    return [
      {
        type: 'FIELDS_CHANGE',
        fieldIDs: {
          quote: this.props.quote.id
        }
      }
    ]
  }

  //add optimistic response to make it look like the count incremented before the server response comes back. This make it look super fast to the user so better UX. This is a temporary response until the server actually responds.

  getOptimisticResponse() {
    return {
      quote: {
        id: this.props.quote.id,
        likesCount: this.props.quote.likesCount + 1
      }
    }
  }
}

export default ThumbsUpMutation
